{"version":3,"sources":["components/PasteBin/PasteBin.tsx","components/FileExplorer/FileExplorer.tsx","components/CodeEditor/CodeEditor.tsx","components/LiveView/LiveView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PasteBin","codeToPaste","useState","url","setUrl","errorMsg","setErrorMsg","pasteHandler","a","body","axios","post","corsUrl","then","response","data","console","log","catch","error","message","className","onClick","FileExplorer","files","func","listFiles","map","file","key","value","status","extension","fileName","CodeEditor","editorTitle","language","onChange","CodeEditorOptions","lineWrapping","lint","mode","theme","onBeforeChange","editor","options","LiveView","srcDoc","title","sandbox","width","height","frameBorder","App","fileStatus","html","css","js","filePath","setHtml","setCss","setJs","setSrcDoc","useEffect","timeout","setTimeout","clearTimeout","setStatus","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8WAwDeA,EA3C2B,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAGrCC,mBAAS,IAH4B,mBAGpDC,EAHoD,KAG/CC,EAH+C,OAM3BF,mBAAS,IANkB,mBAMpDG,EANoD,KAM1CC,EAN0C,KASrDC,EAAY,uCAAG,4BAAAC,EAAA,6DAGXC,EAAO,CACT,YAAe,mCACf,WAAc,QACd,eAAkBR,GAIN,uCAVC,SAaXS,IAAMC,KAAKC,4EAAmDH,GAAMI,MAAK,SAAAC,GAAQ,OAAIV,EAAOU,EAASC,SAC1GF,MAAK,SAACC,GAAD,OAAcE,QAAQC,IAAIH,MAC/BI,OAAM,SAAAC,GACCb,EAAYa,EAAMC,SAClBJ,QAAQG,MAAM,sBAAuBA,MAjB5B,2CAAH,qDAqBlB,OACI,sBAAKE,UAAU,YAAf,UAEI,wBAAQC,QAASf,EAAjB,2BACA,uBAEA,+BAAOJ,GAAOE,QCZXkB,G,MAtBmC,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,KAAMxB,EAAkB,EAAlBA,YAGxDyB,EAAYF,EAAMG,KAAI,SAACC,EAAWC,GAAZ,OACxB,oBAAcC,MAAOF,EAAKG,OAAQV,UAAS,eAAUO,EAAKG,QAAUT,QAAS,kBAAMG,EAAKG,EAAKI,YAA7F,SAA2GJ,EAAKK,UAAvGJ,MAGb,OACI,sBAAKR,UAAU,gBAAf,UACI,qBAAKA,UAAU,wBAAf,SACI,2CAGJ,6BACKK,IAGL,cAAC,EAAD,CAAUzB,YAAaA,S,wCCsBpBiC,G,MA5B+B,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,SAAUN,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,OAAQM,EAAe,EAAfA,SAG7EC,EAAoB,CACtBC,cAAc,EACdC,MAAM,EACNC,KAAML,EACNM,MAAO,YASX,OACI,sBAAKrB,UAAS,sBAAiBU,EAAS,OAAS,SAAnC,KAAd,UACI,qBAAKV,UAAU,sBAAf,SACI,+BAAOc,MAGX,cAAC,aAAD,CAAYQ,eAXC,SAACC,EAAa7B,EAAWe,GAC1CO,EAASP,IAUqCA,MAAOA,EAAOT,UAAU,4CAA4CwB,QAASP,SCvBpHQ,G,MAf2B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEzC,OACI,sBAAK1B,UAAU,YAAf,UACI,qBAAKA,UAAU,oBAAf,SACI,iDAIJ,wBAAQ0B,OAAQA,EAAQC,MAAM,SAASC,QAAQ,gBAAgBC,MAAM,OAAOC,OAAO,OAAOC,YAAY,WC8GnGC,G,MAvHH,WAGV,IAAMC,EAAa,CACjBC,MAAM,EACNC,KAAK,EACLC,IAAI,GAIAjC,EAAQ,CACZ,CACES,SAAU,aACVyB,SAAU,GACV1B,UAAW,OACXI,SAAU,MACVL,OAAQuB,EAAWC,MAErB,CACEtB,SAAU,YACVyB,SAAU,GACV1B,UAAW,MACXI,SAAU,MACVL,OAAQuB,EAAWE,KAErB,CACEvB,SAAU,WACVyB,SAAU,GACV1B,UAAW,KACXI,SAAU,aACVL,OAAQuB,EAAWG,KA9BP,EAmCQvD,mBAAS,IAnCjB,mBAmCTqD,EAnCS,KAmCHI,EAnCG,OAoCMzD,mBAAS,IApCf,mBAoCTsD,EApCS,KAoCJI,EApCI,OAqCI1D,mBAAS,IArCb,mBAqCTuD,EArCS,KAqCLI,EArCK,OAwCY3D,mBAAS,IAxCrB,mBAwCT6C,EAxCS,KAwCDe,EAxCC,KA2ChBC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBH,EAAU,iCAAD,OAECP,EAFD,mCAGEC,EAHF,qCAIGC,EAJH,gCAOR,KAEH,OAAO,kBAAMS,aAAaF,MACzB,CAACT,EAAMC,EAAKC,IAvDC,MA0DYvD,mBAAS,eAAKoD,IA1D1B,mBA0DTvB,EA1DS,KA0DDoC,EA1DC,KAmFhB,OACE,qBAAK9C,UAAU,MAAf,SACE,sBAAKA,UAAU,iBAAf,UAEE,cAAC,EAAD,CAAcG,MAAOA,EAAOC,KA1BZ,SAAC2C,GAEnBD,EADW,SAATC,EACQ,CACRb,MAAM,EACNC,KAAK,EACLC,IAAI,GAEY,QAATW,EACC,CACRb,MAAM,EACNC,KAAK,EACLC,IAAI,GAGI,CACRF,MAAM,EACNC,KAAK,EACLC,IAAI,KAS6CxD,YAAa8C,IAE9D,cAAC,EAAD,CACEZ,YAAaX,EAAM,GAAGS,SACtBG,SAAUZ,EAAM,GAAGY,SACnBN,MAAOyB,EACPlB,SAAUsB,EACV5B,OAAQA,EAAOwB,OAGjB,cAAC,EAAD,CACEpB,YAAaX,EAAM,GAAGS,SACtBG,SAAUZ,EAAM,GAAGY,SACnBN,MAAO0B,EACPnB,SAAUuB,EACV7B,OAAQA,EAAOyB,MAGjB,cAAC,EAAD,CACErB,YAAaX,EAAM,GAAGS,SACtBG,SAAUZ,EAAM,GAAGY,SACnBN,MAAO2B,EACPpB,SAAUwB,EACV9B,OAAQA,EAAO0B,KAGjB,cAAC,EAAD,CAAUV,OAAQA,WC7GXsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1D,MAAK,YAAkD,IAA/C2D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.94139618.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n//Axios for API calling\r\nimport axios from 'axios'\r\n\r\n//CSS\r\nimport './styles.css'\r\n\r\n//Interface specifying the props the component requires\r\ninterface PasteBinProps {\r\n    codeToPaste: string\r\n}\r\n\r\nconst PasteBin: React.FC<PasteBinProps> = ({ codeToPaste }) => {\r\n\r\n    //State hook to update the url with the response\r\n    const [url, setUrl] = useState('');\r\n\r\n    //State hook to update the error with the error msg\r\n    const [errorMsg, setErrorMsg] = useState('');\r\n\r\n    //Function to handle API calls\r\n    const pasteHandler = async () => {\r\n\r\n        //Request body\r\n        const body = {\r\n            'api_dev_key': 'MAnLsR1xw1fXPmPKqtVTucgpDQMPQT8v',\r\n            'api_option': 'paste',\r\n            'api_paste_code': codeToPaste,\r\n        }\r\n\r\n        //URL to enable cors\r\n        const corsUrl = 'https://cors-anywhere.herokuapp.com/'\r\n\r\n        //POST request using axios\r\n        await axios.post(corsUrl + 'https://pastebin.com/api/api_post.php', body).then(response => setUrl(response.data))\r\n        .then((response) => console.log(response))\r\n        .catch(error => {\r\n                setErrorMsg(error.message);\r\n                console.error('There was an error!', error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"paste-bin\">\r\n            {/* Button to generate url */}\r\n            <button onClick={pasteHandler}>Generate Link</button>\r\n            <br />\r\n            {/* //span tag showing URL/ERROR whichever is true */}\r\n            <span>{url || errorMsg}</span>\r\n        </div>\r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default PasteBin","import React from 'react';\r\n\r\n//Import PasteBin Component\r\nimport PasteBin from '../PasteBin/PasteBin';\r\n\r\n//CSS\r\nimport './styles.css';\r\n\r\n//Interface specifying the props the component requires\r\ninterface FileExplorerProps {\r\n    files: any,\r\n    func: any,\r\n    codeToPaste: any\r\n}\r\n\r\nconst FileExplorer: React.FC<FileExplorerProps> = ({ files, func, codeToPaste }) => {\r\n\r\n    // List of the files\r\n    const listFiles = files.map((file: any, key: number) =>\r\n        <li key={key} value={file.status} className={`item-${file.status}`} onClick={() => func(file.extension)} >{file.fileName}</li>\r\n    )\r\n\r\n    return (\r\n        <div className=\"file-explorer\">\r\n            <div className=\"file-explorer__header\">\r\n                <span>Files</span>\r\n            </div>\r\n            {/* render files */}\r\n            <ul>\r\n                {listFiles}\r\n            </ul>\r\n            {/* Button to call pastebin api */}\r\n            <PasteBin codeToPaste={codeToPaste} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FileExplorer;\r\n","import React from 'react';\r\n\r\n//CSS for Codemirror\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\n\r\n//Codemirror modules for html(xml), css and js\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\n\r\n//Controlled editor environment from Codemirror\r\nimport { Controlled as CodeMirror } from 'react-codemirror2'\r\n\r\n//CSS\r\nimport './styles.css'\r\n\r\n//Interface specifying the props the component requires\r\ninterface CodeEditorProps {\r\n    editorTitle: string,\r\n    language: string,\r\n    value: any,\r\n    onChange: any,\r\n    status: any\r\n}\r\n\r\nconst CodeEditor: React.FC<CodeEditorProps> = ({ editorTitle, language, value, status, onChange }) => {\r\n\r\n    //Options specifying the configuration of the code editor\r\n    const CodeEditorOptions = {\r\n        lineWrapping: true,\r\n        lint: true,\r\n        mode: language,\r\n        theme: 'material',\r\n    }\r\n\r\n    //Function that handles dynamic input change\r\n    const handleChange = (editor: any, data: any, value: any) => {\r\n        onChange(value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={`code-editor ${status ? 'flex' : 'hidden'} `} >\r\n            <div className=\"code-editor__header\">\r\n                <span>{editorTitle}</span>\r\n            </div>\r\n            {/* text editor from codemirror */}\r\n            <CodeMirror onBeforeChange={handleChange} value={value} className=\"code-editor__content code-mirror--wrapper\" options={CodeEditorOptions}></CodeMirror>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CodeEditor;","import React from 'react';\r\n\r\n//CSS\r\nimport './styles.css'\r\n\r\n//Interface specifying the props the component requires\r\ninterface LiveViewProps {\r\n    srcDoc: string\r\n}\r\n\r\nconst LiveView: React.FC<LiveViewProps> = ({ srcDoc }) => {\r\n\r\n    return (\r\n        <div className=\"live-view\">\r\n            <div className=\"live-view__header\">\r\n                <span>Live Render</span>\r\n            </div>\r\n            {/* iframe that renders the typed code  */}\r\n            {/* The source of the iframe comes from the srcDoc prop */}\r\n            <iframe srcDoc={srcDoc} title=\"output\" sandbox=\"allow-scripts\" width=\"100%\" height=\"100%\" frameBorder=\"0\"></iframe>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default LiveView;","import React, { useState, useEffect } from \"react\";\r\n\r\n//Import required components\r\nimport FileExplorer from \"./components/FileExplorer/FileExplorer\";\r\nimport CodeEditor from \"./components/CodeEditor/CodeEditor\";\r\nimport LiveView from \"./components/LiveView/LiveView\";\r\n\r\n//CSS\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n\r\n  //Object specifying initital state of the file editors\r\n  const fileStatus = {\r\n    html: false,\r\n    css: false,\r\n    js: false,\r\n  };\r\n\r\n  //Array containing meta-info on files\r\n  const files = [\r\n    {\r\n      fileName: \"index.html\",\r\n      filePath: \"\",\r\n      extension: \"html\",\r\n      language: \"xml\",\r\n      status: fileStatus.html,\r\n    },\r\n    {\r\n      fileName: \"index.css\",\r\n      filePath: \"\",\r\n      extension: \"css\",\r\n      language: \"css\",\r\n      status: fileStatus.css,\r\n    },\r\n    {\r\n      fileName: \"index.js\",\r\n      filePath: \"\",\r\n      extension: \"js\",\r\n      language: \"javascript\",\r\n      status: fileStatus.js,\r\n    },\r\n  ];\r\n\r\n  //State hook used to update the html, css and js code dynamically\r\n  const [html, setHtml] = useState(\"\");\r\n  const [css, setCss] = useState(\"\");\r\n  const [js, setJs] = useState(\"\");\r\n\r\n  //Statehook used to update the code to be rendered\r\n  const [srcDoc, setSrcDoc] = useState(\"\");\r\n\r\n  //Effect hook used to add a delay between the render and the code typed\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setSrcDoc(`\r\n      <html>\r\n        <body>${html}</body>\r\n        <style>${css}</style>\r\n        <script>${js}</script>\r\n      </html>`\r\n      );\r\n    }, 250);\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [html, css, js]);\r\n\r\n  //State hook used to update the status of the file editors\r\n  const [status, setStatus] = useState({ ...fileStatus });\r\n\r\n  //Function that handles the open/close of file editors\r\n  const handleVisible = (type: string) => {\r\n    if (type === \"html\") {\r\n      setStatus({\r\n        html: true,\r\n        css: false,\r\n        js: false,\r\n      });\r\n    } else if (type === \"css\") {\r\n      setStatus({\r\n        html: false,\r\n        css: true,\r\n        js: false,\r\n      });\r\n    } else {\r\n      setStatus({\r\n        html: false,\r\n        css: false,\r\n        js: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App__container\">\r\n        {/* File Explorer Component */}\r\n        <FileExplorer files={files} func={handleVisible} codeToPaste={srcDoc} />\r\n        {/* HTML Editor */}\r\n        <CodeEditor\r\n          editorTitle={files[0].fileName}\r\n          language={files[0].language}\r\n          value={html}\r\n          onChange={setHtml}\r\n          status={status.html}\r\n        />\r\n        {/* CSS Editor */}\r\n        <CodeEditor\r\n          editorTitle={files[1].fileName}\r\n          language={files[1].language}\r\n          value={css}\r\n          onChange={setCss}\r\n          status={status.css}\r\n        />\r\n        {/* JS Editor */}\r\n        <CodeEditor\r\n          editorTitle={files[2].fileName}\r\n          language={files[2].language}\r\n          value={js}\r\n          onChange={setJs}\r\n          status={status.js}\r\n        />\r\n        {/* Live View Renderer */}\r\n        <LiveView srcDoc={srcDoc} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}